{"version":3,"sources":["images/game-bg.svg","images/card-bg.svg","api/settings.js","api/deckofcards.js","styles/theme.js","components/Card.js","components/Hand.js","components/PlayerList.js","components/App.js","index.js"],"names":["module","exports","__webpack_require__","p","settings","firstPlayerName","deckCount","deckShuffled","numPlayers","deckofcards","axios","create","baseURL","getNewDeck","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","requestURL","deckResponse","wrap","_context","prev","next","get","params","deck_count","sent","abrupt","data","stop","this","apply","arguments","getPrevDeck","_ref2","_callee2","deckID","_context2","concat","_x","drawCards","_ref3","_callee3","numCardsToDraw","drawURL","drawResponse","_context3","count","_x2","dealCardToPlayer","_ref4","_callee4","playerName","cardCode","dealCardToPlayerURL","dealCardToPlayerResponse","_context4","cards","_x3","_x4","_x5","getPlayerNames","_ref5","_callee5","getPlayersURL","getPlayersResponse","_context5","keys","piles","t0","_x6","_x7","getPlayerHand","_ref6","_callee6","getPlayerHandURL","getPlayerHandResponse","_context6","_x8","_x9","deckService","theme","board","red","black","CardContainer","styled","div","_templateObject","props","suitColor","cardBg","isFaceUp","overlapPercent","rotateDegrees","offsetPercent","CardFront","_templateObject2","StyledCardCenter","_templateObject3","StyledCardCorners","_templateObject4","isRotated","getSuitSymbol","suit","CardCorner","value","react_default","createElement","isNaN","getValueSymbol","CardCenter","Card","handleClick","e","_this","onFlipCard","code","_this$props","getSuitColor","onClick","Component","defaultProps","HandContainer","section","Hand_templateObject","HandHeader","header","Hand_templateObject2","StyledName","h1","Hand_templateObject3","StyledInfo","h2","Hand_templateObject4","priority","CardsContainer","_templateObject5","Hand","state","faceUpCards","Set","handleFlipCard","newFaceUpCards","has","delete","setState","add","_this2","reduce","acc","card","getCardPoints","numCards","_this3","length","rotateValues","baseRotation","baseValues","Array","fill","midIdx","Math","floor","map","base","idx","getRotateValues","getPoints","components_Card","assign","key","PlayerList","players","playerStates","sortedPlayerStates","slice","sort","p1Obj","p2Obj","name","getSortedPlayerStates","hand","components_Hand","AppContainer","App_templateObject","gameBg","StyledLogo","App_templateObject2","StyledHeader","App_templateObject3","StyledFooter","footer","App_templateObject4","Button","button","App_templateObject5","accent","disabled","Gameboard","_templateObject6","isActive","ActionBar","aside","_templateObject7","DealArea","_templateObject8","CardCounter","_templateObject9","isZero","CardCounterLabel","_templateObject10","Logo","role","aria-label","Header","Footer","href","target","rel","App","gameStarted","deckRemaining","prevDeckID","onNewGame","event","newDeckData","initPlayerStates","localStorage","setItem","onResumeGame","prevDeckData","prevPlayerStates","getPlayerStates","removeItem","alert","playerNames","playerHand","remaining","Promise","all","onDeal","_callee7","dealToPlayerAndUpdate","dealAndUpdatePlayers","drawResponseData","updatedPlayers","_context7","player","dealResponseData","cardsOnHand","toConsumableArray","_ref7","getItem","num","i","playerObj","components_PlayerList","id","renderResumeGame","className","renderGameboard","GlobalStyle","createGlobalStyle","src_templateObject","ReactDOM","render","Fragment","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.4610b9e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/game-bg.67a493c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/card-bg.7dcc97aa.svg\";","const settings = {\r\n    // The name of the first/default player\r\n    firstPlayerName: 'dealer',\r\n\r\n    // The number of decks to start the game with. Each deck has 52 cards.\r\n    // NOTE: The deckofcardsapi.com requires only 1 deck in order to use piles.\r\n    // Since we make use of piles in the API, keep deckCount: 1\r\n    deckCount: 1,\r\n\r\n    // Should the game start with a shuffled deck?\r\n    // Default is true.\r\n    deckShuffled: true,\r\n\r\n    // Number of total players (including the dealer). There will always be one dealer.\r\n    // Default is 2.\r\n    numPlayers: 2,\r\n}\r\n\r\nexport default settings;","import axios from 'axios';\r\nimport settings from './settings';\r\n\r\nconst deckofcards = axios.create({\r\n  baseURL: 'https://deckofcardsapi.com/api',\r\n});\r\n\r\n/**\r\n * Returns a promise for new deck data\r\n */\r\nconst getNewDeck = async () => {\r\n  const requestURL = settings.deckShuffled ? '/deck/new/shuffle/' : '/deck/new/';\r\n  const deckResponse = await deckofcards.get(requestURL, {\r\n    params: { deck_count: settings.deckCount }\r\n  });\r\n  return deckResponse.data;\r\n}\r\n\r\n/**\r\n * Returns a promise for the deck data\r\n * @param {string} deckID A valid deckID that has been used within the past 2 weeks.\r\n */\r\nconst getPrevDeck = async (deckID) => {\r\n  const requestURL = `/deck/${deckID}/`;\r\n  const deckResponse = await deckofcards.get(requestURL);\r\n  return deckResponse.data;\r\n}\r\n\r\n/**\r\n * Returns a promise for the draw cards data\r\n * @param {string} deckID The current deck ID used as the API token\r\n */\r\nconst drawCards = async (deckID) => {\r\n  const numCardsToDraw = settings.numPlayers;\r\n  const drawURL = `/deck/${deckID}/draw/`;\r\n  const drawResponse = await deckofcards.get(drawURL, {\r\n    params: { count: numCardsToDraw }\r\n  });\r\n  return drawResponse.data;\r\n}\r\n\r\n/**\r\n * Returns a promise for the add card to pile data\r\n * DOES NOT WORK WITH MULTIPLE DECKS.\r\n * @param {string} deckID The current deck ID used as the API token\r\n * @param {string} playerName The player who is being dealt the card\r\n * @param {string} cardCode The 2 char card code representing the card being dealt\r\n */\r\nconst dealCardToPlayer = async (deckID, playerName, cardCode) => {\r\n  const dealCardToPlayerURL = `/deck/${deckID}/pile/${playerName}/add/`;\r\n  const dealCardToPlayerResponse = await deckofcards.get(dealCardToPlayerURL, {\r\n    params: { cards: cardCode }\r\n  });\r\n  return dealCardToPlayerResponse.data;\r\n}\r\n\r\n/**\r\n * Returns a list of player names\r\n * DOES NOT WORK WITH MULTIPLE DECKS.\r\n * @param {string} deckID The current deck ID used as the API token\r\n * @param {string} playerName The name of a player, ideally the dealer\r\n */\r\nconst getPlayerNames = async (deckID, playerName) => {\r\n  try {\r\n    const getPlayersURL = `/deck/${deckID}/pile/${playerName}/list/`;\r\n    const getPlayersResponse = await deckofcards.get(getPlayersURL);\r\n    return Object.keys(getPlayersResponse.data.piles);\r\n  }\r\n  catch {\r\n    return [];\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Returns a promise for the data associated with the player's hand\r\n * DOES NOT WORK WITH MULTIPLE DECKS.\r\n * @param {string} deckID The current deck ID used as the API toekn \r\n * @param {string} playerName The player who's hand we are listing out\r\n */\r\nconst getPlayerHand = async (deckID, playerName) => {\r\n  const getPlayerHandURL = `/deck/${deckID}/pile/${playerName}/list/`;\r\n  const getPlayerHandResponse = await deckofcards.get(getPlayerHandURL);\r\n  return getPlayerHandResponse.data.piles[playerName];\r\n}\r\n\r\n\r\nconst deckService = {\r\n  deckofcards,\r\n  getNewDeck,\r\n  getPrevDeck,\r\n  drawCards,\r\n  dealCardToPlayer,\r\n  getPlayerNames,\r\n  getPlayerHand,\r\n};\r\n\r\n\r\nexport default deckService;\r\nexport { deckofcards };","const theme = {\r\n  board: 'seagreen',\r\n  red: '#b81b1b',\r\n  black: '#272727'\r\n}\r\n\r\nexport default theme;","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport theme from '../styles/theme';\r\nimport cardBg from '../images/card-bg.svg';\r\n// Card background image: https://www.heropatterns.com/\r\n\r\n// ==================================================\r\n//  STYLED COMPONENTS\r\n// ==================================================\r\n\r\nconst CardContainer = styled.div`\r\n  color: ${props => theme[props.suitColor]};\r\n  background-color: #08AEEA;\r\n  background-image: url(${cardBg}), linear-gradient(30deg, #08AEEA 0%, #2AF598 100%);\r\n  background-position: center center, auto auto;\r\n  ${props => props.isFaceUp &&\r\n    `background-color: white;\r\n    background-image: linear-gradient(30deg, rgba(240,240,240,1) 0%, rgba(255,255,255,1) 100%);\r\n    `\r\n  }\r\n  border-radius: 16px;\r\n  box-shadow: 0px 0px 4px rgba(0,0,0,0.2), -2px 0px 8px rgba(0,0,0,0.2);\r\n  width: 160px;\r\n  height: 240px;\r\n  cursor: pointer;\r\n  user-select: none;\r\n\r\n  margin: 0 calc(${props => props.overlapPercent / -100} * 160px);\r\n  transform: rotate(${props => props.rotateDegrees}deg) translateY(${props => props.offsetPercent}%);\r\n  transform-origin: ${props => props.rotateDegrees < 0 ? `bottom right` : `bottom left`};\r\n  transition: all 0.3s ease;\r\n\r\n  :first-child { margin-left: 0; }\r\n  :last-child { margin-right: 0; }\r\n  :hover {\r\n    margin: 0 32px 0 0;\r\n    transform: translateY(-10%);\r\n  }\r\n\r\n  i {\r\n    font-style: normal;\r\n  }\r\n`;\r\n\r\nconst CardFront = styled.div`\r\n  opacity: ${props => props.isFaceUp ? 1 : 0};\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst StyledCardCenter = styled.div`\r\n  font-size: 6.4rem;\r\n  position: relative;\r\n  height: 100%;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst StyledCardCorners = styled.div`\r\n  font-size: 2.4rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  line-height: 1;\r\n  padding: 16px;\r\n  position: absolute;\r\n  ${props => props.isRotated ? \r\n    `bottom: 0;\r\n    right: 0;\r\n    transform: rotate(180deg);`\r\n    :\r\n    `top: 0;\r\n    left: 0;`\r\n  }\r\n\r\n`;\r\n\r\n// ==================================================\r\n//  HELPER FUNCTIONS\r\n// ==================================================\r\nfunction getValueSymbol(value) {\r\n  if (!isNaN(value)) { return ''+value; }\r\n  if (value === 'ACE') { return 'A'; }\r\n  if (value === 'JACK') { return 'J'; }\r\n  if (value === 'QUEEN') { return 'Q'; }\r\n  if (value === 'KING') {return 'K'; }\r\n  return 'E';\r\n}\r\n\r\nfunction getSuitSymbol(suit) {\r\n  if (suit === 'SPADES') { return '♠'; }\r\n  if (suit === 'CLUBS') { return '♣'; }\r\n  if (suit === 'HEARTS') { return '♥'; }\r\n  if (suit === 'DIAMONDS') { return '♦'; }\r\n  return '️E';\r\n}\r\n\r\nfunction getSuitColor(suit) {\r\n  return (suit === 'HEARTS' || suit === 'DIAMONDS') ? 'red' : 'black';\r\n}\r\n\r\n// ==================================================\r\n//  HELPER COMPONENTS\r\n// ==================================================\r\nfunction CardCorner(props) {\r\n  const { suit, value, isRotated } = props;\r\n  return (\r\n    <StyledCardCorners isRotated={isRotated}>\r\n      <i>{getValueSymbol(value)}</i>\r\n      <i>{getSuitSymbol(suit)}</i>\r\n    </StyledCardCorners>\r\n  );\r\n}\r\n\r\nfunction CardCenter(props) {\r\n  const { suit } = props;\r\n  return (\r\n    <StyledCardCenter>\r\n      <i>{getSuitSymbol(suit)}</i>\r\n    </StyledCardCenter>\r\n  )\r\n}\r\n\r\n// ==================================================\r\n//  MAIN COMPONENT\r\n// ==================================================\r\nclass Card extends Component {\r\n  // Hand component manages the flipping state of cards\r\n  // Hand component passes isFaceUp as a prop to Card\r\n  handleClick = (e) => {\r\n    this.props.onFlipCard(e, this.props.code);\r\n  }\r\n\r\n  render() {\r\n    const { isFaceUp, value, suit, overlapPercent, offsetPercent, rotateDegrees } = this.props;\r\n    const suitColor = getSuitColor(suit);\r\n    return (\r\n      <CardContainer \r\n        onClick={this.handleClick}\r\n        isFaceUp={isFaceUp}\r\n        suitColor={suitColor}\r\n        overlapPercent={overlapPercent}\r\n        offsetPercent={offsetPercent}\r\n        rotateDegrees={rotateDegrees}\r\n      >\r\n        <CardFront isFaceUp={isFaceUp}>\r\n          <CardCenter suit={suit} />\r\n          <CardCorner suit={suit} value={value} />\r\n          <CardCorner suit={suit} value={value} isRotated />\r\n        </CardFront>\r\n      </CardContainer>\r\n    );\r\n  }\r\n}\r\n\r\nCard.defaultProps = {\r\n  offsetPercent: 0,\r\n  rotateDegrees: 0\r\n}\r\n\r\nexport default Card;","import React, { Component } from \"react\";\r\nimport styled from 'styled-components';\r\nimport Card from './Card';\r\n\r\n// ==================================================\r\n//  STYLED COMPONENTS\r\n// ==================================================\r\nconst HandContainer = styled.section`\r\n  padding: 1.6rem;\r\n`;\r\n\r\nconst HandHeader = styled.header`\r\n  padding: 4rem 0 2.4rem 0;\r\n`;\r\n\r\nconst StyledName = styled.h1`\r\n  text-transform: uppercase;\r\n  margin: 0;\r\n`;\r\n\r\nconst StyledInfo = styled.h2`\r\n  font-weight: normal;\r\n  display: inline-block;\r\n  background: ${props => props.priority ? `rgba(0,0,0,0.3)` : `rgba(0,0,0,0.1)`};\r\n  border-radius: 1.6rem;\r\n  padding: 0.8rem 2.4rem;\r\n  margin: 0.8rem;\r\n`;\r\n\r\nconst CardsContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  max-width: 100%;\r\n  min-height: 240px;\r\n`;\r\n\r\n// ==================================================\r\n//  HELPER FUNCTIONS\r\n// ==================================================\r\n/**\r\n * Returns overlap value used for css\r\n * @param {number} numCards The number of cards in the hand we want to fan \r\n */\r\nfunction getOverlapValues(numCards) {\r\n  if (numCards < 2) { return 0; }\r\n  if (numCards < 4) { return 15; }\r\n  if (numCards < 6) { return 25; }\r\n  if (numCards < 10) { return 30; }\r\n  if (numCards < 20) { return 33; }\r\n  return 36;\r\n}\r\n\r\n/**\r\n * Returns an array of rotation values used for css transfrom: rotate()\r\n * @param {number} numCards The number of cards in the hand we want to fan \r\n */\r\nfunction getRotateValues(numCards) {\r\n  const calcBaseRotation = () => {\r\n    if (numCards < 2) { return 0; }\r\n    if (numCards < 8) { return 3; }\r\n    if (numCards < 12) { return 2; }\r\n    if (numCards < 22) { return 1; }\r\n    return 0;\r\n  }\r\n  const baseRotation = calcBaseRotation();\r\n  const baseValues = Array(numCards).fill(baseRotation);\r\n  const midIdx = Math.floor(baseValues.length / 2);\r\n  const rotateValues = baseValues.map((base, idx) => {\r\n    return base * (idx - midIdx);\r\n  })\r\n  return rotateValues;\r\n}\r\n\r\nclass Hand extends Component {\r\n  /**\r\n   * faceUpCards: the set of cards that are face up and should be used to calculate points\r\n   */\r\n  state = {\r\n    faceUpCards: new Set()\r\n  }\r\n\r\n  // Flip the state of the card and add/remove it from the Set of faceUpCards\r\n  handleFlipCard = (e, cardCode) => {\r\n    const newFaceUpCards = new Set(this.state.faceUpCards);\r\n    if (this.state.faceUpCards.has(cardCode)) {\r\n      newFaceUpCards.delete(cardCode);\r\n      this.setState({ faceUpCards: newFaceUpCards });\r\n    }\r\n    else {\r\n      newFaceUpCards.add(cardCode)\r\n      this.setState({ faceUpCards: newFaceUpCards });\r\n    } \r\n  }\r\n\r\n  // Returns the sum of only the face up cards on hand\r\n  getPoints() {\r\n    const sum = this.props.cards.reduce((acc, card) => {\r\n      return this.state.faceUpCards.has(card.code) ? acc + this.getCardPoints(card) : acc;\r\n    }, 0);\r\n    return sum;\r\n  }\r\n\r\n  // Returns the point value of a card\r\n  // Ace is 1 pt, Face cards are 10 pts, Cards 2-10 are worth those points respectively \r\n  getCardPoints(card) {\r\n    if (!isNaN(card.value)) {\r\n      return +card.value;\r\n    }\r\n    if (card.value === \"ACE\") {\r\n      return 1;\r\n    }\r\n    if (card.value === \"JACK\" || card.value === \"QUEEN\" || card.value === \"KING\") {\r\n      return 10;\r\n    }\r\n    return 0; \r\n  }\r\n\r\n  render() {\r\n    const {playerName, cards } = this.props;\r\n    const overlapPercent = getOverlapValues(cards.length);\r\n    const rotateValues = getRotateValues(cards.length);\r\n    return (\r\n      <HandContainer>\r\n        <HandHeader>\r\n          <StyledName>{playerName}</StyledName>\r\n          <StyledInfo priority>{this.getPoints()} <small>Points</small></StyledInfo>\r\n          <StyledInfo>{cards.length} <small>Cards</small></StyledInfo>\r\n        </HandHeader>\r\n        \r\n        <CardsContainer>\r\n          {cards.map((card, idx) => {\r\n            const faceUpCards = this.state.faceUpCards\r\n            return (\r\n              <Card \r\n                key={card.code} \r\n                isFaceUp={faceUpCards.has(card.code)} \r\n                onFlipCard={this.handleFlipCard}\r\n                overlapPercent={overlapPercent}\r\n                rotateDegrees={rotateValues[idx]}\r\n                { ...card } \r\n                />\r\n            );\r\n          })}\r\n        </CardsContainer>\r\n      </HandContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Hand;\r\n","import React from \"react\";\r\nimport Hand from \"./Hand\";\r\n\r\n// ==================================================\r\n//  HELPER FUNCTIONS\r\n// ==================================================\r\n/**\r\n * Returns a sorted COPY of playerState objects, sorted by the 'name' property \r\n * @param {playerState[]} playerStates A list of player state objects that should be sorted by name\r\n */\r\nfunction getSortedPlayerStates(playerStates) {\r\n  const sortedPlayerStates = playerStates.slice();\r\n  sortedPlayerStates.sort((p1Obj, p2Obj) => {\r\n    if (p1Obj.name < p2Obj.name) { return -1; }\r\n    if (p1Obj.name > p2Obj.name) { return 1; }\r\n    return 0;\r\n  });\r\n  return sortedPlayerStates;\r\n}\r\n\r\nfunction PlayerList(props) {\r\n  const sortedPlayerStates = getSortedPlayerStates(props.players);\r\n  const players = sortedPlayerStates.map(({ name, hand, numCards }) => {\r\n    return (\r\n        <Hand key={name} playerName={name} cards={hand} />\r\n    );\r\n  });\r\n\r\n  return <div>{players}</div>;\r\n}\r\n\r\nexport default PlayerList;\r\n","import React, { Component } from \"react\";\nimport styled from 'styled-components';\nimport deckService from '../api/deckofcards';\nimport settings from '../api/settings';\nimport theme from '../styles/theme';\nimport gameBg from '../images/game-bg.svg';\nimport PlayerList from './PlayerList';\n\n// ==================================================\n//  STYLED COMPONENTS\n// ==================================================\nconst AppContainer = styled.div`\n  text-align: center;\n  height: 100vh;\n  width: 100vw;\n  color: white;\n  background: ${theme.board} url(${gameBg});\n  box-shadow: inset 0 0 160px rgba(0,0,0,0.2), inset 0 0 240px rgba(0,0,0,0.3);\n  overflow-x: hidden;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n  \n`;\n\nconst StyledLogo = styled.h1`\n  font-size: 4.8rem;\n  margin: 0;\n`;\n\nconst StyledHeader = styled.header`\n  text-align: center;\n  padding: 4rem;\n`;\n\nconst StyledFooter = styled.footer`\n  text-align: center;\n  padding: 4rem;\n  opacity: 0.5;\n`;\n\nconst Button = styled.button`\n  font-family: inherit;\n  font-weight: inherit;\n  font-size: 2.4rem;\n  color: mediumseagreen;\n  height: 8rem;\n  width: 24rem;\n  margin: 0.8rem;\n  background: white;\n  border: none;\n  border-radius: 8rem;\n  outline: none;\n  box-shadow: 0 2px 2px rgba(0,0,0,0.2), 0 4px 4px rgba(0,0,0,0.1);\n  cursor: pointer;\n  transition: all 0.3s ease;\n  :hover {\n    color: seagreen;\n    box-shadow: 0 2px 2px rgba(0,0,0,0.2), 0 4px 4px rgba(0,0,0,0.4);\n  }\n\n  ${props => props.accent && `\n    background: mediumseagreen;\n    color: honeydew;\n    :hover { color: white; }\n  `}\n  ${props => props.disabled && `\n    cursor: not-allowed;\n    background: darkseagreen;\n    color: honeydew;\n    :hover { color: inherit; }\n  `}\n`;\n\nconst Gameboard = styled.div`\n  ${props => props.isActive && `\n    /* display: flex;\n    height: 100%;\n    width: 100%; */\n  `}\n\n`;\n\nconst ActionBar = styled.aside`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding: 2.4rem;\n  margin-top: 2.4rem;\n  border-top: 2px solid rgba(0,0,0,0.2);\n`;\n\nconst DealArea = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst CardCounter = styled.p`\n  font-size: 3.2rem;\n  font-weight: bold;\n  text-align: center;\n  line-height: 7.2rem;\n  height: 8rem;\n  width: 8rem;\n  background:${props => props.isZero ? `rgba(0,0,0,0.1)` : `rgba(0,0,0,0.3)`};\n  border: ${props => props.isZero ? `8px dashed rgba(255,255,255, 0.8)` : `8px solid rgba(255,255,255,0.6)`};\n  border-radius: 2rem;\n  margin: auto;\n`;\n\nconst CardCounterLabel = styled.p`\n  text-transform: uppercase;\n  opacity: 0.6;\n  font-size: 0.8em;\n  letter-spacing: 0.1ch;\n  margin: 0.8rem 0 0 0;\n  font-weight: bold;\n`;\n\n// ==================================================\n//  HELPER COMPONENTS\n// ==================================================\nfunction Logo(props) {\n  return (\n    <StyledLogo>\n      <span role=\"img\" aria-label=\"Playing Card\">🃏</span> Card Game<br/>\n    </StyledLogo>\n  );\n}\n\nfunction Header(props) {\n  return (\n    <StyledHeader>\n      <Logo />\n    </StyledHeader>\n  )\n}\n\nfunction Footer(props) {\n  return (\n    <StyledFooter>\n      By <a href=\"https://arpitsheth.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Arpit Sheth</a>\n    </StyledFooter>\n  )\n}\n\n\n// ==================================================\n//  MAIN COMPONENT\n// ==================================================\nclass App extends Component {\n  /**\n   * gameStarted: Show splash screen if game hasn't started, else show gameboard\n   * deckID: The unique string used to access our deck from the API\n   * deckRemaining: The number of cards remaining according to the API\n   * players: A list of names used to track players (or piles) from the API. The first player is the dealer.\n   * prevDeckID: The deckID from the last game played, retrieved from local storage\n   */\n  state = {\n    gameStarted: false,\n    deckID: '',\n    deckRemaining: 0,\n    players: [],\n    prevDeckID: '',\n  };\n\n  componentWillMount() {\n    const prevDeckID = localStorage.getItem('deckID');\n    if (prevDeckID !== null) {\n      this.setState({ prevDeckID: prevDeckID });\n    }\n  }\n\n  /**\n   * Requests a new deck from the API and initializes the gameboard state\n   * Edit ../api/settings.js for API and game settings\n   */\n  onNewGame = async (event) => {\n    const newDeckData = await deckService.getNewDeck();\n\n    this.setState({ \n      gameStarted: true, \n      deckID: newDeckData['deck_id'], \n      deckRemaining: newDeckData['remaining'],\n      players: this.initPlayerStates(settings.numPlayers),\n    });\n\n    localStorage.setItem('deckID', newDeckData['deck_id']);\n  }\n\n  onResumeGame = async(event) => {\n    if (this.state.prevDeckID) {\n      try {\n        const prevDeckData = await deckService.getPrevDeck(this.state.prevDeckID);\n        const prevPlayerStates = await this.getPlayerStates(this.state.prevDeckID);\n        const playerStates = (prevPlayerStates.length === 0) ? this.initPlayerStates(settings.numPlayers) : prevPlayerStates;\n        this.setState({\n          gameStarted: true,\n          deckID: prevDeckData['deck_id'],\n          deckRemaining: prevDeckData['remaining'],\n          players: playerStates,\n        })\n      }\n      catch {\n        localStorage.removeItem('deckID');\n        alert('Unable to resume previous game.');\n      }\n    } \n  }\n\n  /**\n   * Returns a list of player objects { name: '', hand: cards[], numCards: int }\n   * @param {number} num The number of players in the game, including the dealer. Should be > 0.\n   * @returns {object[]}  \n   */\n  initPlayerStates(num) {\n    const playerStates = [...Array(num)].map((e, i) => {\n      const playerObj = { name: `player${i}`, hand: [], numCards: 0 }\n      if (i === 0) { playerObj.name = settings.firstPlayerName }\n      return playerObj;\n    })\n    return playerStates;\n  }\n\n  getPlayerStates = async (deckID) => {\n    const playerNames = await deckService.getPlayerNames(deckID, settings.firstPlayerName);\n    const playerStates = playerNames.map(async playerName => {\n      const playerHand = await deckService.getPlayerHand(deckID, playerName);\n      return { name: playerName, hand: playerHand.cards, numCards: playerHand.remaining }\n    });\n    return Promise.all(playerStates); \n  }\n\n  /**\n   * Deals one face down card to each player.\n   */\n  onDeal = async () => {\n    // HELPER: Returns an updated player object after dealing a card to them\n    const dealToPlayerAndUpdate = async (player, card) => {\n      const dealResponseData = await deckService.dealCardToPlayer(this.state.deckID, player.name, card.code);\n      const cardsOnHand = dealResponseData.piles[player.name].remaining;\n      return { name: player.name, hand: [...player.hand, card], numCards: cardsOnHand };\n    }\n\n    // HELPER: Returns a list of promises for updated player states\n    const dealAndUpdatePlayers = () => {\n      return this.state.players.map(async (player, idx) => await dealToPlayerAndUpdate(player, cards[idx]));\n    }\n    // ----- END of Helper Functions -----\n\n    // First, Draw cards and keep a list of cards\n    const drawResponseData = await deckService.drawCards(this.state.deckID);\n    this.setState({ deckRemaining: drawResponseData.remaining })\n    const cards = drawResponseData.cards;\n\n    // Then, Deal cards to each player and update their player objects\n    const updatedPlayers = await Promise.all(dealAndUpdatePlayers())\n    this.setState({ players: updatedPlayers });\n  }\n\n\n  // Resumes a previous game if its data is stored in localStorage\n  renderResumeGame() {\n    if (this.state.prevDeckID) {\n      return <Button onClick={this.onResumeGame}>Resume Game</Button>\n    }\n  }\n\n  renderGameboard() {\n    if (!this.state.gameStarted) {\n      return (\n        <Gameboard id=\"gameboard-splash\">\n          <div>\n            <Button onClick={this.onNewGame}>Start Game</Button>\n            {this.renderResumeGame()}\n          </div>\n        </Gameboard>\n      );\n    } else {\n      return (\n        <Gameboard isActive>\n          <PlayerList players={this.state.players} />\n          <ActionBar>\n            {/* <p style={{display: 'none'}}>\n              <strong>Deck ID:</strong> {this.state.deckID}\n            </p> */}\n            <Button onClick={this.onNewGame} accent={this.state.deckRemaining !== 0}>New Game</Button>\n            <DealArea>\n              <div>\n                <CardCounter isZero={this.state.deckRemaining === 0}>\n                  {this.state.deckRemaining}\n                </CardCounter>\n                <CardCounterLabel>Cards Remaining</CardCounterLabel>\n              </div>\n              <Button onClick={this.onDeal} disabled={this.state.deckRemaining === 0}>Deal</Button>\n            </DealArea>\n          </ActionBar>\n        </Gameboard>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <AppContainer className=\"App\">\n        <Header />\n        {this.renderGameboard()}\n        <Footer />\n      </AppContainer>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createGlobalStyle } from 'styled-components';\nimport App from './components/App';\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n  html {\n    font-size: 62.5%;\n  }\n  body {\n    font-family: Bahnschrift, 'Segoe UI', Roboto, -apple-system, BlinkMacSystemFont, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    font-weight: 300;\n    font-size: 1.6rem;\n    margin: 0;\n    padding: 0;\n  }\n  a, a:hover, a:visited, a:focus {\n    color: inherit;\n    outline: none;\n  }\n`;\n\nReactDOM.render(\n  (\n    <>\n      <GlobalStyle />\n      <App />\n    </>\n  ), document.getElementById('root'));\n"],"sourceRoot":""}